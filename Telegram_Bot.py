import asyncio
import os
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, CallbackContext
import requests
from deep_translator import GoogleTranslator
import deepl
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import pytz

# –ß—É—Ç–ª–∏–≤—ñ –¥–∞–Ω—ñ —Ç–µ–ø–µ—Ä –∑—á–∏—Ç—É—é—Ç—å—Å—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
DEEPL_KEY = os.getenv("DEEPL_KEY")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω
published_news = set()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DeepL API
def translate_text_deepl(text, target_language="uk"):
    try:
        translator = deepl.Translator(DEEPL_KEY)
        result = translator.translate_text(text, target_lang=target_language)
        return result.text
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
        return text  # –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –≤–¥–∞–≤—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç

# –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–æ –∫–æ–∂–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏
def add_signature(message):
    signature = "\n\n–ó–∞–≤–∂–¥–∏ —Å–≤—ñ–∂—ñ —ñ–≥—Ä–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–∞:\n[üá∫üá¶AGC](https://t.me/Artmok_GC)"
    return f"{message}{signature}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ RSS —ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª
async def post_rss_news_to_channel():
    global published_news  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É

    try:
        rss_url = "https://feeds.feedburner.com/ign/pc-articles"
        response = requests.get(rss_url)
        soup = BeautifulSoup(response.content, 'xml')
        articles = soup.find_all('item')

        new_news = []

        for article in articles:
            title = article.title.text
            link = article.link.text
            description = article.description.text

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
            if link not in published_news:
                # –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DeepL
                translated_title = translate_text_deepl(title, "uk")
                translated_description = translate_text_deepl(description, "uk")

                # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å
                message = f"*{translated_title}*\n\n{translated_description}\n[–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ]({link})"
                message_with_signature = add_signature(message)

                await bot.send_message(chat_id=CHANNEL_ID, text=message_with_signature, parse_mode="Markdown")

                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–Ω—É –¥–æ —Å–ø–∏—Å–∫—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö
                published_news.add(link)
                new_news.append(title)

                # –ü–∞—É–∑–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏ –Ω–æ–≤–∏–Ω
                await asyncio.sleep(7200)

        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
        if not new_news:
            print("–ù–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print(f"–ù–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏: {new_news}")

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∞–±–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑ RSS: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –∑–∞—Ä–∞–∑ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —á–∞—Å—É –º—ñ–∂ 10:00 —Ç–∞ 22:00 –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
def is_within_posting_hours():
    kyiv_tz = pytz.timezone("Europe/Kiev")
    now = datetime.now(kyiv_tz).time()
    start_time = datetime.strptime("10:00", "%H:%M").time()
    end_time = datetime.strptime("22:00", "%H:%M").time()
    return start_time <= now <= end_time

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω
async def schedule_news():
    while True:
        if is_within_posting_hours():
            print("–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω.")
            await post_rss_news_to_channel()
            await asyncio.sleep(7200)  # –ü—É–±–ª—ñ–∫—É—î–º–æ –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏ (7200 —Å–µ–∫—É–Ω–¥)
        else:
            print("–ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω.")
            await asyncio.sleep(600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω, —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–æ–≤–∏–Ω
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_news())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()
